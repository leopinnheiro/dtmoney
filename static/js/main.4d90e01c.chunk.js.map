{"version":3,"sources":["assets/logo.svg","components/Header/styles.ts","components/Header/index.tsx","styles/global.ts","components/Dashboard/styles.ts","assets/income.svg","assets/outcome.svg","assets/total.svg","services/api.ts","hooks/useTransactions.tsx","utils/formats.ts","components/Summary/styles.ts","components/Summary/index.tsx","components/TransactionsTable/styles.ts","components/TransactionsTable/index.tsx","components/Dashboard/index.tsx","assets/close.svg","components/NewTransactionModal/styles.ts","components/NewTransactionModal/index.tsx","App.tsx","index.tsx"],"names":["Container","styled","header","Content","div","Header","onOpenNewTransactionModal","src","logoImg","alt","type","onClick","GlobalStyle","createGlobalStyle","main","api","axios","create","baseURL","TransactionsContext","createContext","TransactionsProvider","children","useState","transactions","setTransactions","transactionInput","a","post","response","transaction","data","useEffect","get","then","Provider","value","createTransaction","useTransactions","useContext","formatCurrency","valor","Intl","NumberFormat","style","currency","format","Summary","summary","reduce","acc","deposits","amount","withdraws","total","incomeImg","outcomeImg","className","totalImg","TransactionsTable","map","title","category","createdAt","DateTimeFormat","Date","id","Dashboard","form","TransactionTypeContainer","colors","green","red","RadioBox","button","props","isActive","transparentize","activeColor","darken","NewTransactionModal","isOpen","onRequestClose","setTitle","setAmount","setCategory","setType","event","preventDefault","overlayClassName","closeImg","onSubmit","placeholder","onChange","target","Number","App","isNewTransactionModalOpen","setIsNewTransactionModalOpen","Modal","setAppElement","createServer","models","Model","seeds","server","db","loadData","routes","this","namespace","schema","all","request","JSON","parse","requestBody","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4d90e01c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.614d71d1.svg\";","import styled from \"styled-components\";\n\nexport const Container = styled.header`\n  background: var(--blue);\n`;\n\nexport const Content = styled.div`\n  max-width: 1120px;\n  margin: 0 auto;\n\n  padding: 2rem 1rem 12rem;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  button {\n    font-size: 1rem;\n    color: var(--white);\n    background: var(--blue-light);\n    border: 0;\n    padding: 0 2rem;\n    border-radius: 0.25rem;\n    height: 3rem;\n    \n    transition: filter 0.2s;\n\n    &:hover {\n      filter: brightness(0.9);\n    }\n  }\n`;","import logoImg from \"../../assets/logo.svg\";\nimport { Container, Content } from \"./styles\";\n\ninterface HeaderProps {\n  onOpenNewTransactionModal: () => void;\n}\n\nexport function Header({ onOpenNewTransactionModal } : HeaderProps) {\n  return (\n    <Container>\n      <Content>\n        <img src={logoImg} alt=\"dtmoney\" />\n        <button type=\"button\" onClick={onOpenNewTransactionModal}>\n          Nova transação\n        </button>\n      </Content>\n    </Container>\n  )\n};","import { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n  :root {\n    --background: #F0F2F5;\n    --red: #E52E4D;\n    --blue: #5429CC;\n    --white: #FFFFFF;\n    --green: #33CC95;\n\n    --blue-light: #6933FF;\n\n    --text-title: #363F5F;\n    --text-body: #969CB3;\n\n    --shape: #FFFFFF;\n\n    --input-background: #E7E9EE;\n    --border: #D7D7D7;\n  }\n\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n\n  //font-size: 16px (Desktop)\n  html {\n    @media (max-width: 1080px) {\n      font-size: 93.75%; // 15px\n    }\n\n    @media (max-width: 720px) {\n      font-size: 87.5%; // 14px\n    }\n  }\n\n  body {\n    background: var(--background);\n    -webkit-font-smoothing: antialiased;\n  }\n\n  body, input, textarea, button {\n    font-family: 'Poppins', sans-serif;\n    font-weight: 400;\n  }\n\n  h1, h2, h3, h4, h5, h6, strong {\n    font-weight: 600;\n  }\n\n  button {\n    cursor: pointer;\n  }\n\n  [disabled]{\n    opacity: 0.6;\n    cursor: not-allowed;\n  }\n\n  .react-modal-overlay {\n    background: rgba(0, 0, 0, 0.5);\n\n    position: fixed;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  .react-modal-content {\n    width: 100%;\n    max-width: 576px;\n    background: var(--background);\n    padding: 3rem;\n    position: relative;\n    border-radius: 0.25rem;\n  }\n\n  .react-modal-close {\n    position: absolute;\n    right: 1.5rem;\n    top: 1.5rem;\n    border: 0;\n    background: transparent;\n\n    transition: filter 0.2s;\n\n    &:hover {\n      filter: brightness(0.7);\n    }\n  }\n`;","import styled from \"styled-components\";\n\nexport const Container = styled.main`\n  max-width: 1120px;\n  margin: 0 auto;\n  padding: 2.5rem 1rem;\n`;","export default __webpack_public_path__ + \"static/media/income.d58effe2.svg\";","export default __webpack_public_path__ + \"static/media/outcome.6eb96d30.svg\";","export default __webpack_public_path__ + \"static/media/total.e90c2d1e.svg\";","import axios from \"axios\";\n\n//baseURL: 'https://leopinnheiro.github.io/dtmoney/api'\n\nconst isDevelopment = process.env.NODE_ENV !== 'production';\n\nexport const api = axios.create({\n  baseURL: isDevelopment\n    ? 'http://localhost:3000/dtmoney/api' \n    : 'https://leopinnheiro.github.io/dtmoney/api'\n})","import { createContext, ReactNode, useContext, useEffect, useState } from \"react\";\nimport { api } from \"../services/api\";\n\ninterface Transaction {\n  id: number,\n  title: string,\n  type: string,\n  category: string,\n  amount: number,\n  createdAt: string\n}\n\ntype TransactionInput = Omit<Transaction, 'id' | 'createdAt'>;\n\ninterface TransactionsProviderProps {\n  children: ReactNode;\n}\n\ninterface TransactionsContextData {\n  transactions: Transaction[];\n  createTransaction: (transaction: TransactionInput) => Promise<void>;\n}\n\nconst TransactionsContext = createContext<TransactionsContextData>(\n  {} as TransactionsContextData\n);\n\nexport function TransactionsProvider({ children }: TransactionsProviderProps) {\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n\n  useEffect(() => {\n    api.get('/transactions')\n      .then(response => setTransactions(response.data.transactions));\n  },[]);\n\n  async function createTransaction(transactionInput: TransactionInput){\n    const response = await api.post('/transactions', transactionInput);\n    const { transaction } = response.data;\n\n    setTransactions([\n      ...transactions\n      , transaction\n    ]);\n  }\n\n  return (\n    <TransactionsContext.Provider value={{transactions, createTransaction}}>\n      {children}\n    </TransactionsContext.Provider>\n  );\n}\n\nexport function useTransactions() {\n  const context = useContext(TransactionsContext);\n\n  return context;\n}","export function formatCurrency(valor: number){\n  return new Intl.NumberFormat('pt-BR', {\n    style: 'currency',\n    currency: 'BRL'\n  }).format(valor);\n}\n\nexport function formatDate(valor: string){\n  return new Intl.DateTimeFormat('pt-BR').format(\n    new Date(valor)\n  );\n}","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 2rem;\n  margin-top: -10rem;\n\n  div {\n    background: var(--shape);\n    padding: 1.5rem 2rem;\n    border-radius: 0.25rem;\n    color: var(--text-title);\n\n    header {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n    }\n\n    strong {\n      display: block;\n      margin-top: 1rem;\n      font-size: 2rem;\n      font-weight: 500;\n      line-height: 3rem;\n    }\n\n    &.highlight-background {\n      background: var(--green);\n      color: var(--white);\n    }\n  }\n`;","import incomeImg from '../../assets/income.svg';\nimport outcomeImg from '../../assets/outcome.svg';\nimport totalImg from '../../assets/total.svg';\nimport { useTransactions } from '../../hooks/useTransactions';\nimport { formatCurrency } from '../../utils/formats';\n\nimport { Container } from \"./styles\";\n\nexport function Summary() {\n  const { transactions } = useTransactions();\n\n  const summary = transactions.reduce((acc, transaction) => {\n    if (transaction.type === 'deposit') {\n      acc.deposits += transaction.amount;\n    } else {\n      acc.withdraws += transaction.amount;\n    }\n    acc.total += transaction.amount;\n    return acc;\n  }, {\n    deposits: 0,\n    withdraws: 0,\n    total: 0\n  });\n\n  return (\n    <Container>\n      <div>\n        <header>\n          <p>Entradas</p>\n          <img src={incomeImg} alt=\"Entradas\" />\n        </header>\n        <strong>{formatCurrency(summary.deposits)}</strong>\n      </div>\n      <div>\n        <header>\n          <p>Saídas</p>\n          <img src={outcomeImg} alt=\"Saídas\" />\n        </header>\n        <strong>{formatCurrency(summary.withdraws)}</strong>\n      </div>\n      <div className=\"highlight-background\">\n        <header>\n          <p>Total</p>\n          <img src={totalImg} alt=\"Total\" />\n        </header>\n        <strong>{formatCurrency(summary.total)}</strong>\n      </div>\n    </Container>\n  );\n}","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  margin-top: 4rem;\n\n  table {\n    width: 100%;\n    border-spacing: 0 0.5rem;\n\n    th {\n      color: var(--text-body);\n      font-weight: 400;\n      padding: 1rem 2rem;\n      text-align: left;\n      line-height: 1.5rem;\n    }\n\n    td {\n      padding: 1rem 2rem;\n      border: 0;\n      background: var(--shape);\n      font-weight: 400;\n      color: var(--text-body);\n      border-radius: 0.25rem;\n\n      &:first-child {\n        color: var(--text-title);\n      }\n\n      &.deposit {\n        color: var(--green);\n      }\n\n      &.withdraw {\n        color: var(--red);\n      }\n    }\n  }\n`;","import { useTransactions } from \"../../hooks/useTransactions\";\nimport { formatCurrency, formatDate } from \"../../utils/formats\";\nimport { Container } from \"./styles\";\n\nexport function TransactionsTable() {\n  const { transactions } = useTransactions();\n\n  return (\n    <Container>\n      <table>\n        <thead>\n          <tr>\n            <th>Título</th>\n            <th>Valor</th>\n            <th>Categoria</th>\n            <th>Data</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {transactions.map(transaction => (\n            <tr key={transaction.id}>\n              <td>{transaction.title}</td>\n              <td className={transaction.type}>{formatCurrency(transaction.amount)}</td>\n              <td>{transaction.category}</td>\n              <td>{formatDate(transaction.createdAt)}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </Container>\n  );\n}","import { Container } from \"./styles\";\nimport { Summary } from \"../Summary\";\nimport { TransactionsTable } from \"../TransactionsTable\";\n\nexport function Dashboard() {\n  return (\n    <Container>\n      <Summary />\n      <TransactionsTable />\n    </Container>\n  );\n}","export default __webpack_public_path__ + \"static/media/close.f62862c6.svg\";","import styled from \"styled-components\";\nimport { darken, transparentize } from \"polished\";\n\nexport const Container = styled.form`\n  h2 {\n    color: var(--text-title);\n    font-size: 1.5rem;\n    margin-bottom: 2rem;\n  }\n\n  input {\n    width: 100%;\n    padding: 0 1.5rem;\n    height: 4rem;\n    border-radius: 0.25rem;\n\n    border: 1px solid var(--border);\n    background: var(--input-background);\n\n    font-weight: 400;\n    font-size: 1rem;\n\n    &::placeholder {\n      color: var(--text-body);\n    }\n\n    & + input {\n      margin-top: 1rem;\n    }\n  }\n\n  button[type=\"submit\"] {\n    width: 100%;\n    padding: 0 1.5rem;\n    height: 4rem;\n    background: var(--green);\n    color: var(--white);\n    border-radius: 0.25rem;\n    border: 0;\n    font-size: 1rem;\n    margin-top: 1.5rem;\n    font-weight: 600;\n\n    transition: filter 0.2s;\n\n    &:hover {\n      filter: brightness(0.9);\n    }\n  }\n`;\n\nexport const TransactionTypeContainer = styled.div`\n  margin: 1rem 0;\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: 0.5rem;\n`;\n\n\ninterface RadioBoxProps {\n  isActive: boolean;\n  activeColor: 'green' | 'red';\n}\n\nconst colors = {\n  green: '#33CC95',\n  red: '#E52E4D'\n}\n\nexport const RadioBox = styled.button<RadioBoxProps>`\n  height: 4rem;\n  border: 1px solid var(--border);\n  border-radius: 0.25rem;\n\n  background: ${(props) => props.isActive\n    ? transparentize(0.9, colors[props.activeColor])\n    : 'transparent'};\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  transition: border-color 0.2s;\n\n  &:hover {\n    border-color: ${darken(0.1, '#D7D7D7')};\n  }\n\n  img {\n    width: 20px;\n    height: 20px;\n  }\n\n  span {\n    display: inline-block;\n    margin-left: 1rem;\n    font-size: 1rem;\n    color: var(--text-title);\n  }\n`;","import Modal from \"react-modal\";\nimport incomeImg from '../../assets/income.svg';\nimport outcomeImg from '../../assets/outcome.svg';\nimport closeImg from '../../assets/close.svg';\nimport { Container, TransactionTypeContainer, RadioBox } from \"./styles\";\nimport { FormEvent, useState } from \"react\";\nimport { useTransactions } from \"../../hooks/useTransactions\";\n\ninterface NewTransactionModalProps {\n  isOpen: boolean;\n  onRequestClose: () => void;\n}\n\nexport function NewTransactionModal({ isOpen, onRequestClose }: NewTransactionModalProps) {\n  const { createTransaction } = useTransactions();\n\n  const [title, setTitle] = useState('');\n  const [amount, setAmount] = useState(0);\n  const [category, setCategory] = useState('');\n  const [type, setType] = useState('deposit');\n\n  async function handleCreateNewTransaction(event: FormEvent) {\n    event.preventDefault();\n\n    await createTransaction({\n      title,\n      category,\n      type,\n      amount\n    });\n\n    setTitle('');\n    setAmount(0);\n    setCategory('');\n    setType('deposit');\n\n    onRequestClose();\n  }\n\n  function handleSetTypeDeposit(){\n    setType('deposit');\n  }\n  function handleSetTypeWithdraw(){\n    setType('withdraw');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onRequestClose={onRequestClose}\n      overlayClassName=\"react-modal-overlay\"\n      className=\"react-modal-content\"\n    >\n      <button\n        type=\"button\"\n        onClick={onRequestClose}\n        className=\"react-modal-close\"\n      >\n        <img src={closeImg} alt=\"Fechar modal\" />\n      </button>\n      <Container onSubmit={handleCreateNewTransaction}>\n        <h2>Cadastrar transação</h2>\n        <input\n          placeholder=\"Título\"\n          value={title}\n          onChange={event => setTitle(event.target.value)}\n        />\n        <input\n          type=\"number\"\n          placeholder=\"Valor\"\n          value={amount}\n          onChange={event => setAmount(Number(event.target.value))}\n        />\n        \n        <TransactionTypeContainer>\n          <RadioBox\n            type=\"button\"\n            onClick={handleSetTypeDeposit}\n            isActive={type === 'deposit'}\n            activeColor=\"green\"\n          >\n            <img src={incomeImg} alt=\"Entrada\" />\n            <span>Entrada</span>\n          </RadioBox>\n          <RadioBox\n            type=\"button\"\n            onClick={handleSetTypeWithdraw}\n            isActive={type === 'withdraw'}\n            activeColor=\"red\"\n          >\n            <img src={outcomeImg} alt=\"Saída\" />\n            <span>Saída</span>\n          </RadioBox>\n        </TransactionTypeContainer>\n\n        <input\n          placeholder=\"Categoria\"\n          value={category}\n          onChange={event => setCategory(event.target.value)}\n        />\n        <button type=\"submit\">Cadastrar</button>\n      </Container>\n    </Modal>\n  )\n}","import { useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { Header } from \"./components/Header\";\nimport { GlobalStyle } from \"./styles/global\";\nimport { Dashboard } from \"./components/Dashboard\";\nimport { NewTransactionModal } from './components/NewTransactionModal';\nimport { TransactionsProvider } from \"./hooks/useTransactions\";\n\nModal.setAppElement('#root');\n\nexport function App() {\n  const [isNewTransactionModalOpen, setIsNewTransactionModalOpen] = useState(false);\n\n  function handleOpenNewTransactionModal() {\n    setIsNewTransactionModalOpen(true);\n  }\n\n  function handleCloseNewTransactionModal() {\n    setIsNewTransactionModalOpen(false);\n  }\n  \n  return (\n    <TransactionsProvider>\n      <Header onOpenNewTransactionModal={handleOpenNewTransactionModal} />\n      <Dashboard />\n\n      <NewTransactionModal\n        isOpen={isNewTransactionModalOpen}\n        onRequestClose={handleCloseNewTransactionModal}\n      />\n\n      <GlobalStyle />\n    </TransactionsProvider>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport { createServer, Model } from \"miragejs\";\n\ncreateServer({\n  models: {\n    transaction: Model,\n  },\n\n  seeds(server) {\n    server.db.loadData({\n      transactions: [\n        {\n          id: 1,\n          title: 'Desenvolvimento de site',\n          type: 'deposit',\n          category: 'Venda',\n          amount: 12000.00,\n          createdAt: new Date('2021-04-14')\n        },\n        {\n          id: 2,\n          title: 'Hambúrguer',\n          type: 'withdraw',\n          category: 'Alimentação',\n          amount: -59.00,\n          createdAt: new Date('2021-04-10')\n        },\n        {\n          id: 3,\n          title: 'Aluguel',\n          type: 'withdraw',\n          category: 'Despesas fixas',\n          amount: -1200.00,\n          createdAt: new Date('2021-04-05')\n        },\n        {\n          id: 4,\n          title: 'Venda de computador',\n          type: 'deposit',\n          category: 'Venda',\n          amount: 5400.50,\n          createdAt: new Date('2021-04-13')\n        },\n      ]\n    })\n  },\n\n  routes() {\n    this.namespace = 'dtmoney/api';\n\n    this.get('/transactions', () => {\n      return this.schema.all('transaction');\n    });\n\n    this.post('/transactions', (schema, request) => {\n      const data = JSON.parse(request.requestBody);\n\n      return schema.create('transaction', {\n        ...data,\n        amount: data.type === 'withdraw' ? data.amount * -1 : data.amount,\n        createdAt: new Date(),\n      });\n    });\n  }\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}